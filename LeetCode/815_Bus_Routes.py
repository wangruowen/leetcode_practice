# https://leetcode.com/problems/bus-routes/
from collections import defaultdict

class Solution:
    def numBusesToDestination(self, routes, S, T):
        """
        :type routes: List[List[int]]
        :type S: int
        :type T: int
        :rtype: int
        """
        # BFS
        # from S, see what buses we can take at S, then repeat until we reach T
        # Note that, it is a special case that we may get stuck in one station,
        # and there is only one bus that only stop at this station.
        next_stop_map = defaultdict(set)  # station2bus is a map from current station to next possible stations
        for bus_id, route in enumerate(routes):
            for i, s in enumerate(route):
                next_stop_map[s].add((bus_id, route[(i+1) % len(route)]))

        # for k, v in next_stop_map.items():
        #     print(k, v)

        # If we can get on a bus which will eventually reach to T, then we don't need to get off that bus
        buses_to_T = set([bus_id for bus_id, _ in next_stop_map[T]])

        q = [[S, -1, 0]]  # cur_stop, last_bus, total_buses
        visited = set()  # If we have visited this stop from this bus, we should not visited it again
        while q:
            new_q = []
            min_num_bus = float('inf')
            for i, last_bus_id, num_bus in q:
                if i == T or last_bus_id in buses_to_T:
                    min_num_bus = min(min_num_bus, num_bus)

                for bus_id, next_stop in next_stop_map[i]:
                    if (bus_id, next_stop) in visited:
                        continue
                    visited.add((bus_id, next_stop))
                    if bus_id == last_bus_id:
                        new_q.append((next_stop, bus_id, num_bus))
                    else:
                        # change a bus
                        new_q.append((next_stop, bus_id, num_bus + 1))
            if min_num_bus < float('inf'):
                return min_num_bus
            q = new_q
        return -1

    def numBusesToDestination_v2(self, routes, S, T):
        to_routes = defaultdict(set)
        for i,route in enumerate(routes):
            for j in route: to_routes[j].add(i)
        bfs = [(S,0)]
        seen = set([S])
        for stop, bus in bfs:
            if stop == T: return bus
            for route_i in to_routes[stop]:
                for next_stop in routes[route_i]:
                    if next_stop not in seen:
                        bfs.append((next_stop, bus+1))
                        seen.add(next_stop)
                routes[route_i] = []
        return -1


s = Solution()
r = [[7,12],[4,5,15],[6],[15,19],[9,12,13]]
S = 15
T = 12
r = [[148,167,216],[6,23,25,40,43,58,63,69,77,86,94,96,106,117,119,127,139,151,153,155,157,186,191,196,200,204,210,216,219],[2,6,7,16,27,30,42,47,49,68,69,77,93,94,96,102,104,111,114,126,131,137,150,161,167,171,174,193,198,199,200,223],[46,131,211],[25,36,51,52,65,78,90,102,103,105,108,114,123,151,152,153,162,174,175],[217],[9,10,15,27,37,38,41,43,46,51,67,74,81,82,83,94,95,107,113,120,122,123,124,132,149,160,162,169,170,171,174,177,185,192,193,195,196,198,213,217,220,221],[74,78,85,95,130,136,145,152,173,175,180,181,184,193,199,202],[13,18,28,38,41,42,47,75,87,91,106,151,158,166,181,182,199,216],[44,63,71,74,144,162,169,220],[2,23,115,185,208],[0,8,13,14,35,46,67,89,91,122,124,126,130,156,177,193,212,214],[2,4,24,37,40,43,55,68,81,92,106,107,109,127,132,138,145,159,163,165,170,172,183,184,209,213,215,220],[5,16,17,34,38,48,55,59,60,65,69,84,86,94,100,103,109,110,112,127,130,131,134,145,148,149,154,161,166,169,182,183,201,203,208,214,223],[0,2,5,6,8,19,49,50,53,79,92,94,97,109,110,112,121,129,132,135,138,139,144,160,166,170,194,197,198,201,212],[27,52,61,112,118,133,142,159,175,186,216],[2,20,34,64,65,77,87,91,95,96,97,125,126,131,144,146,149,152,154,164,165,170,179,205,207],[24,85,123,132,172,173,194,222],[2,4,5,15,23,36,44,47,63,64,78,80,84,97,99,102,104,114,120,130,132,143,161,162,163,167,171,172,176,179,180,194,196,199,202,204,209,214,216,221],[8,22,26,31,38,39,41,59,78,90,102,108,110,138,141,146,176,185,190,198,200,219,220],[5,24,30,46,55,64,67,74,78,136,194,216],[133,142,202],[13,40,49,57,63,75,76,85,91,107,116,121,128,135,137,141,154,193,198,200,204,223],[4,13,14,26,28,33,39,49,58,65,67,74,77,81,90,96,122,124,144,156,158,166,169,170,179,203,204,208,215,223],[6,20,28,36,46,90,107,115,124,131,135,144,147,148,149,161,162,174,176,214,221],[10,20,21,29,35,36,62,65,67,70,72,87,89,92,100,103,107,109,113,126,129,139,140,145,146,147,174,176,180,184,189,190,193,196,198,199,200,209,217],[19,22,27,54,59,63,77,102,122,126,140,143,154,164,165,175,212,216,217,218],[11,13,16,18,27,31,46,49,69,77,88,109,111,119,121,146,161,169,193,194,198,200,204],[1,7,28,58,73,91,98,138,150,173,182,186,213],[3,25,28,33,46,68,70,74,78,97,141,146,149,169,172,178,185,188,202,212,223],[3,4,19,22,24,37,38,43,54,55,56,57,58,62,66,72,75,77,88,106,114,119,127,132,133,137,144,146,150,156,161,164,165,179,181,195,200,213,214,215,222],[9,11,14,15,38,46,55,61,66,68,69,75,76,79,82,91,100,101,102,113,135,141,142,171,175,180,198,208,210,215,218,221],[2,30,33,62,93,104,124,127,128,147,158,160,161,173,181,189,192,199,201,215,223],[4,26,29,38,47,58,61,69,78,93,94,112,114,131,136,144,182,193,198,203,206,209],[5,13,14,16,17,22,30,32,45,47,49,55,63,64,68,77,82,84,86,92,98,100,104,107,117,119,122,127,134,153,164,179,185,197,201,209,212,213,220,223],[2,4,5,6,42,55,75,81,84,93,102,111,112,113,118,129,142,149,159,169,191,193,200,214,223],[10,12,15,19,20,24,33,34,40,47,54,64,93,104,115,121,123,124,155,172,189,190,193,196,202,212,219,222],[104,108,143],[14,15,20,21,31,47,48,59,67,70,74,82,94,102,109,121,125,128,148,162,165,171,180,196,199,202,205,212,214],[2,6,17,18,41,50,60,70,118,151,155,158,166,167,172,180,182,186,188,195],[1,23,25,30,39,41,42,48,58,65,67,94,100,121,126,135,145,152,163,164,171,174,206,210,220,224],[18,25,96,123,172],[5,7,9,12,13,19,22,25,34,51,62,64,74,79,81,85,88,101,102,119,123,140,143,149,155,165,166,167,178,182,189,204,213,222,223],[1,5,18,21,23,50,54,59,62,67,68,72,87,94,95,96,110,116,118,122,133,135,151,155,156,158,171,178,183,184,192,198,208,212,222,224],[18,20,24,34,47,52,56,68,77,82,89,91,97,101,105,106,107,109,118,123,139,141,143,152,153,162,174,180,184,187,188,192,198,202,206,216,224]]
S = 180
T = 143
r = [[1,21,24,29,35,55,57,64,65,69,72,77,93,104,107,117,128],[3,7,8,22,29,31,37,42,49,51,61,69,75,83,91,92,98,119,120],[9,25,45,67,103,105,122,128],[0,2,10,14,16,26,35,48,52,71,85,88,100,102,107,110,114,115,117,125,126],[1,14,25,33,36,38,41,47,48,53,57,76,85,86,87,93,96,97,102,105,106,114,122],[97],[7,22,30,39,47,66,70,86,87,101,104],[3,4,6,17,18,29,34,35,37,52,65,74,75,85,96,99,107,110,112,117],[40,45,70,72,83,87,101,121],[73,110],[5,11,17,31,41,44,51,63,87,90,91,94,97,98,109,114,118,126],[22,37,54,62,67,96,99,111,118],[5,20,21,34,35,42,55,56,82],[18,24,40,43,48,51,61,76,84,91,109,119,123],[5,11,14,18,23,36,42,43,50,51,53,61,70,75,76,81,85,88,92,94,95,103,105,128],[114],[11,17,19,21,23,28,46,47,59,67,72,73,74,75,79,86,87,89,101,102,105,111,126],[0,14,21,29,45,50,64,69,74,79,81,115,125,129],[4,9,22,33,39,45,55,66,69,70,78,84,89,97,98,107,110,113,114,120],[2,22,38,62,79,89,92,96,123],[22,40,55,65,105,107,119,126],[6,11,13,31,37,38,48,63,67,74,81,93,96,101,104,105,108,121,127],[3,19,40,42,69,79],[4,19,33,41,43,60,71,78,79,90,104,110,118,127],[16,26,27,36,37,49,68,91,92,108],[12,17,41,48,55,59,66,101,103]]
S=102
T=66
print(s.numBusesToDestination(r, S, T))